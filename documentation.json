{
    "pipes": [],
    "interfaces": [
        {
            "name": "ProductState",
            "id": "interface-ProductState-a4785047cdbf9088b20183af47d8d721",
            "file": "src/app/product/store/product.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Action, createReducer, on } from '@ngrx/store';\nimport { EntityState, EntityAdapter, createEntityAdapter } from '@ngrx/entity';\nimport { Product } from './product.model';\nimport * as ProductActions from './product.actions';\n\nexport const productsFeatureKey = 'products';\n\nexport interface ProductState extends EntityState<Product> {\n  // additional entities state properties\n  error: any;\n  selectedProduct: Product;\n}\n\nexport const adapter: EntityAdapter<Product> = createEntityAdapter<Product>();\n\nexport const initialState: ProductState = adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n  selectedProduct: undefined\n});\n\n\nexport const productReducer = createReducer(\n  initialState,\n  // add product\n  on(ProductActions.addProductSuccess,\n    (state, action) =>\n      adapter.addOne(action.product, state)\n  ),\n  on(ProductActions.addProductFailure, (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }),\n// Load list of products\n  on(ProductActions.loadProductsSuccess,\n    (state, action) => adapter.setAll(action.products, state)\n  ),\n  on(ProductActions.loadProductsFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n// Load indiviual product\n  on(ProductActions.loadProductSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        selectedProduct: action.selectedProduct\n      };\n    }\n  ),\n  on(ProductActions.loadProductFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n// update product\n  on(ProductActions.updateProduct,\n    (state, action) => adapter.updateOne(action.product, state)\n  ),\n// delete product\n  on(ProductActions.deleteProduct,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n);\nexport function reducer(state: ProductState | undefined, action: Action): any {\n  return productReducer(state, action);\n}\nexport const {\n  selectIds,\n  selectEntities,\n  selectAll,\n  selectTotal,\n} = adapter.getSelectors();\n",
            "properties": [
                {
                    "name": "error",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "selectedProduct",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "extends": "EntityState"
        }
    ],
    "injectables": [
        {
            "name": "AuthGuardService",
            "id": "injectable-AuthGuardService-d7978dbc5199b7fb3f72b934d1c0ddd2",
            "file": "src/app/shared/services/auth-guard.service.ts",
            "properties": [
                {
                    "name": "router",
                    "type": "Router",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 10
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService {\n\n  constructor(public router: Router) {}\n\n  canActivate(): boolean {\n    if (localStorage.getItem('user') === null) {\n      this.router.navigate(['/home']);\n      return false;\n    }\n    return true;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "CommonService",
            "id": "injectable-CommonService-264672b7fa3d0e7a7a3a3aea2a5a4402",
            "file": "src/app/common.service.ts",
            "properties": [
                {
                    "name": "baseurl",
                    "defaultValue": "environment.baseUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methods": [
                {
                    "name": "createProduct",
                    "args": [
                        {
                            "name": "product",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 20,
                    "jsdoctags": [
                        {
                            "name": "product",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProductData",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProducts",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Product[]>",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "updateProduct",
                    "args": [
                        {
                            "name": "id",
                            "type": "string | number"
                        },
                        {
                            "name": "data",
                            "type": "Partial<Product>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Product>",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string | number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "Partial<Product>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Product } from './product/store/product.model';\nimport { Observable } from 'rxjs';\nimport { environment } from '../environments/environment';\nimport { ErrorHandlingService } from './shared/services/error-handling.service';\nimport { retry, catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CommonService {\n\n  baseurl = environment.baseUrl;\n  constructor(\n    private http: HttpClient,\n    private errorHandlingService: ErrorHandlingService,\n  ) { }\n\n  createProduct(product): Observable<Product> {\n    const url = this.baseurl + 'products/';\n    return this.http.post<Product>(url, product)\n    .pipe(\n     retry(1),\n     catchError(this.errorHandlingService.handleError)\n   );\n  }\n  getProducts(): Observable<Product[]> {\n    const url = this.baseurl + 'products/';\n    return this.http.get<Product[]>(url)\n    .pipe(\n     retry(1),\n     catchError(this.errorHandlingService.handleError)\n   );\n  }\n  getProductData(id): Observable<Product> {\n    const url = this.baseurl + 'products/' + id;\n    return this.http.get<Product>(url)\n    .pipe(\n     retry(1),\n     catchError(this.errorHandlingService.handleError)\n   );\n  }\n  updateProduct(id: string | number, data: Partial<Product>): Observable<Product> {\n    const url = this.baseurl + 'products/' + id;\n    return this.http.put<Product>(url, data)\n    .pipe(\n     retry(1),\n     catchError(this.errorHandlingService.handleError)\n   );\n  }\n  deleteProduct(id): any {\n    const url = this.baseurl + 'products/' + id;\n    return this.http.delete(url)\n    .pipe(\n     retry(1),\n     catchError(this.errorHandlingService.handleError)\n   );\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ErrorHandlingService",
            "id": "injectable-ErrorHandlingService-a73f29d29f36d88c08e4ada50b08468c",
            "file": "src/app/shared/services/error-handling.service.ts",
            "properties": [
                {
                    "name": "error",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 10,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Observable, throwError } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlingService {\n  error: '';\n  errorMessage = '';\n  constructor() { }\n  handleError(error): Observable<never> {\n    if (error.error instanceof ErrorEvent) {\n        // client-side error\n        this.error = error.error.message;\n        this.errorMessage = `Error: ${error.error.message}`;\n    } else {\n        // server-side error\n        this.error = error.message;\n        this.errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\n    }\n    console.log(error);\n    return throwError(this.errorMessage);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "type": "injectable"
        },
        {
            "name": "LoginRegistrationSetupService",
            "id": "injectable-LoginRegistrationSetupService-e8a819691d18451ba00405a67f2b0fdf",
            "file": "src/app/setup/login-registration-setup.service.ts",
            "properties": [
                {
                    "name": "baseurl",
                    "defaultValue": "environment.baseUrl",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "flagLogin",
                    "defaultValue": "new Subject<boolean>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "LoginUser",
                    "args": [
                        {
                            "name": "username",
                            "type": ""
                        },
                        {
                            "name": "password",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 38
                },
                {
                    "name": "registerUser",
                    "args": [
                        {
                            "name": "user",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<User>",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendData",
                    "args": [
                        {
                            "name": "islogin",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "islogin",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { User } from './model/user.model';\nimport { Router } from '@angular/router';\nimport { retry, catchError } from 'rxjs/operators';\nimport { ErrorHandlingService } from '../shared/services/error-handling.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginRegistrationSetupService {\n\n  baseurl = environment.baseUrl;\n  private flagLogin = new Subject<boolean>();\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n    private errorHandlingService: ErrorHandlingService\n  ) { }\n\n  registerUser(user): Observable<User> {\n    const url = this.baseurl + 'user-details/';\n    return this.http.post<User>(url, user)\n    .pipe(\n     retry(1),\n     catchError(this.errorHandlingService.handleError)\n   );\n  }\n  LoginUser(username, password): Observable<User> {\n    const url = this.baseurl + 'user-details?' + 'user_name=' + username + '&password=' + password;\n    return this.http.get<User>(url)\n    .pipe(\n      retry(1),\n      catchError(this.errorHandlingService.handleError)\n    );\n  }\n  Logout(): any{\n    localStorage.clear();\n  }\n  sendData(islogin: boolean): any {\n    this.flagLogin.next(islogin);\n  }\n\n  getData(): Observable<boolean> {\n    return this.flagLogin.asObservable();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "errorHandlingService",
                        "type": "ErrorHandlingService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ProductEffects",
            "id": "injectable-ProductEffects-047b1f89824d1c483c0609d8f1bc7f23",
            "file": "src/app/product/store/product.effects.ts",
            "properties": [
                {
                    "name": "createProduct$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.addProduct),\n      mergeMap(action =>\n        this.commonService.createProduct(action.product).pipe(\n            map(product => fromProductAction.addProductSuccess({product})),\n            catchError(error => of(fromProductAction.addProductFailure({error})))\n        )\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "deleteProduct$",
                    "defaultValue": "createEffect(() =>\n  this.actions$.pipe(\n    ofType(fromProductAction.deleteProduct),\n    mergeMap(action =>\n       this.commonService.deleteProduct(\n          action.id,\n        )\n      ),\n      // tab(()=> this.router.navigate(''))\n    ),\n    {dispatch: false}\n)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "editProduct$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.updateProduct),\n      mergeMap(action =>\n        this.commonService.updateProduct(\n          action.product.id,\n          action.product.changes\n          )\n        ),\n        // tab(()=> this.router.navigate(''))\n      ),\n      {dispatch: false}\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "loadProducts$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.loadProducts),\n      mergeMap(() =>\n        this.commonService.getProducts().pipe(\n            map(products => fromProductAction.loadProductsSuccess({products})),\n            catchError(error => of(fromProductAction.loadProductsFailure({error})))\n        )\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loadSelectedProduct$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.loadProduct),\n      mergeMap((action) =>\n        this.commonService.getProductData(action.id).pipe(\n            map(product => fromProductAction.loadProductSuccess({selectedProduct: product})),\n            catchError(error => of(fromProductAction.loadProductFailure({error})))\n        )\n      )\n    )\n  )",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Actions, createEffect, ofType} from '@ngrx/effects';\nimport { mergeMap, map, catchError} from 'rxjs/operators';\nimport { CommonService } from '../../common.service';\nimport * as fromProductAction from './product.actions';\nimport { of } from 'rxjs';\n\n@Injectable()\nexport class ProductEffects {\n// add product\n  createProduct$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.addProduct),\n      mergeMap(action =>\n        this.commonService.createProduct(action.product).pipe(\n            map(product => fromProductAction.addProductSuccess({product})),\n            catchError(error => of(fromProductAction.addProductFailure({error})))\n        )\n      )\n    )\n  );\n// Load list of products\n  loadProducts$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.loadProducts),\n      mergeMap(() =>\n        this.commonService.getProducts().pipe(\n            map(products => fromProductAction.loadProductsSuccess({products})),\n            catchError(error => of(fromProductAction.loadProductsFailure({error})))\n        )\n      )\n    )\n  );\n// Load indiviual product\n  loadSelectedProduct$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.loadProduct),\n      mergeMap((action) =>\n        this.commonService.getProductData(action.id).pipe(\n            map(product => fromProductAction.loadProductSuccess({selectedProduct: product})),\n            catchError(error => of(fromProductAction.loadProductFailure({error})))\n        )\n      )\n    )\n  );\n// update product\n  editProduct$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(fromProductAction.updateProduct),\n      mergeMap(action =>\n        this.commonService.updateProduct(\n          action.product.id,\n          action.product.changes\n          )\n        ),\n        // tab(()=> this.router.navigate(''))\n      ),\n      {dispatch: false}\n  );\n// delete product\n  deleteProduct$ = createEffect(() =>\n  this.actions$.pipe(\n    ofType(fromProductAction.deleteProduct),\n    mergeMap(action =>\n       this.commonService.deleteProduct(\n          action.id,\n        )\n      ),\n      // tab(()=> this.router.navigate(''))\n    ),\n    {dispatch: false}\n);\n  constructor(\n    private actions$: Actions,\n    private commonService: CommonService,\n    ) {}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions"
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService"
                    }
                ],
                "line": 72,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-71e3e5004ac31dc9e27ce18877ce7c41",
            "file": "src/app/shared/services/theme.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "literal type"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "literal type",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDark",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "toggleLight",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport const darkTheme = {\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n};\nexport const lightTheme = {\n  'primary-color': '#fff',\n  'background-color': '#fff',\n  'text-color': '#2d2d2d'\n};\n@Injectable({ providedIn: 'root' })\n\nexport class ThemeService {\n  toggleDark(): any {\n    this.setTheme(darkTheme);\n  }\n  toggleLight(): any {\n    this.setTheme(lightTheme);\n  }\n  private setTheme(theme: {}): any {\n    Object.keys(theme).forEach(k =>\n      document.documentElement.style.setProperty(`--${k}`, theme[k])\n    );\n  }\n}\n",
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Product",
            "id": "class-Product-b910df40ab09d71964e3663e44c4fe1e",
            "file": "src/app/product/store/product.model.ts",
            "type": "class",
            "sourceCode": "export class Product {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  quantity: string;\n  imgPath: string;\n}\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imgPath",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "quantity",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "User",
            "id": "class-User-ecb94fd48dc33d834f5c2cd5ed563a93",
            "file": "src/app/setup/model/user.model.ts",
            "type": "class",
            "sourceCode": "export class User {\n  userId: string;\n  userName: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "userId",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "userName",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddProductComponent",
            "id": "component-AddProductComponent-53661056ce3ea5b0b0bf6b2ad0cdfcfd",
            "file": "src/app/product/add-product/add-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-product",
            "styleUrls": [
                "./add-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isEdit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "productForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "productId",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "products$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedProduct",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "userStatus",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "edit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67
                },
                {
                    "name": "editData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { ProductState } from '../store/product.reducer';\nimport { select, Store } from '@ngrx/store';\nimport { addProduct, loadProduct, loadProducts, updateProduct } from '../store/product.actions';\nimport { selectProduct, selectedProduct } from '../store/product.selecters';\nimport { Observable } from 'rxjs';\nimport { Product } from '../store/product.model';\nimport { Update } from '@ngrx/entity';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-add-product',\n  templateUrl: './add-product.component.html',\n  styleUrls: ['./add-product.component.scss']\n})\nexport class AddProductComponent implements OnInit {\n\n  products$: Observable<Product[]>;\n  selectedProduct: any;\n  productForm: FormGroup;\n  isEdit: boolean;\n  userStatus: any;\n  productId: any;\n  constructor(\n    private fb: FormBuilder,\n    private store: Store<ProductState>,\n    private activatedRoute: ActivatedRoute,\n    private router: Router\n    ) {\n    }\n\n  ngOnInit(): void{\n    // const prodid = 'id';\n    // this. productId = this.activatedRoute.snapshot.params.get(prodid);\n    // if (this.activatedRoute.snapshot.url[0].path === 'edit-product') {\n    //   this.edit();\n    // }\n    this.createForm();\n  }\n  createForm(): void{\n    this.productForm = this.fb.group({\n      id:  [''],\n      name: ['', Validators.required],\n      description: ['', [Validators.required]],\n      price: ['', [Validators.required]],\n      quantity: ['', [Validators.required]],\n      img_path: ['assets/img/box.jpg']\n    });\n  }\n  patchForm(data?: any): void{\n    this.productForm = this.fb.group({\n      id:  ['' || data.id],\n      name: ['' || data.name, Validators.required],\n      description: ['' || data.description, [Validators.required]],\n      price: ['' || data.price, [Validators.required]],\n      quantity: ['' || data.quantity, [Validators.required]],\n      img_path: ['assets/img/box.jpg']\n    });\n  }\n\n  onSubmit(data): void{\n    this.store.dispatch(addProduct({product: data}));\n    this.productForm.reset();\n    this.router.navigate(['./ngrx-crud-opration/product-list']);\n  }\n  edit(): void {\n    this.isEdit = true;\n    const id = this.productId;\n    this.store.dispatch(loadProduct({id}));\n    this.store.pipe(select(selectedProduct)).subscribe((product) => {\n      this.selectedProduct = Object.assign(new Product(), product);\n      this.patchForm(this.selectedProduct);\n    });\n  }\n  editData(): void{\n    this.productForm.value.id = this.productId;\n    const uppdate: Update<Product> = {\n      id: this.productForm.value.id,\n      changes: this.productForm.value\n    };\n    this.store.dispatch(updateProduct({product: uppdate}));\n    this.productForm.reset();\n    this.isEdit = false;\n    this.router.navigate(['./ngrx-crud-opration/product-list']);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".heading {\n    font-size: 25px;\n    padding: 20px;\n}\n\n.input-container{\n    padding: 10px;\n}\n\n@media only screen \nand (min-width: 760px), (min-device-width: 768px) \nand (min-deviace-width: 1024px)   {\n\n\ntable{\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n    }\nthead {\n    color: rgba(0,0,0,0.6);\n}\ntr{\n    border-bottom: 1px solid rgba(0,0,0,0.12);\n}\ntbody {\n    display: table-row-group;\n    vertical-align: middle;\n    border-color: inherit;\n}\ntable, thead, tbody, th, td, tr {\n    padding: 20px;\n    font-size: 18px;\n}\n// .table-row:nth-child(odd) {\n//     background: #ccc;\n//     }\n}\n@media only screen \nand (max-width: 760px), (min-device-width: 768px) \nand (max-deviace-width: 1024px)  {\n    .container {\n        margin: 0 auto;\n        padding: 5px;\n        width: 90%;\n    }\n  /* Force table to not be like tables anymore */\n  table, thead, tbody, th, td, tr {\n      display: block;\n      font-size: 14px;\n  }\n\n  /* Hide table headers (but not display: none;, for accessibility) */\n  thead tr {\n      position: absolute;\n      top: -9999px;\n      left: -9999px;\n  }\n\ntr {\nmargin: 0 0 1rem 0;\n}\n\ntr:nth-child(odd) {\n    background: #ccc;\n  }\n\n  td {\n      /* Behave  like a \"row\" */\n      border: none;\n      border-bottom: 1px solid #eee;\n      position: relative;\n      padding-left: 50%;\n  }\n\n  td:before {\n      /* Now like a table header */\n      position: absolute;\n      /* Top/left values mimic padding */\n      top: 0;\n      left: 6px;\n      width: 45%;\n      padding-right: 10px;\n      white-space: nowrap;\n  }\n\n  /*\n  Label the data\nYou could also use a data-* attribute and content for this. That way \"bloats\" the HTML, this way means you need to keep HTML and CSS in sync. Lea Verou has a clever way to handle with text-shadow.\n  */\n  td:nth-of-type(1):before { content: \"Id\"; }\n  td:nth-of-type(2):before { content: \"Title\"; }\n  td:nth-of-type(3):before { content: \"Short Description\"; }\n  td:nth-of-type(4):before { content: \"Category Tag\"; }\n  td:nth-of-type(5):before { content: \"Edit\"; }\n  td:nth-of-type(6):before { content: \"Delete\"; }\n}",
                    "styleUrl": "./add-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<ProductState>"
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ProductState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <div class=\"heading\" *ngIf=\"isEdit != true\">Add Product</div>\n    <div class=\"heading\" *ngIf=\"isEdit == true\">Edit Product</div>\n\n    <form [formGroup]=\"productForm\" (ngSubmit)=\"onSubmit(productForm.value)\">\n      <div class=\"input-container\">\n        <input type=\"text\"  formControlName=\"name\" placeholder=\"Name\" class=\"full-width\">\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.name.invalid && (productForm.controls.name.dirty || productForm.controls.name.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.name.errors.required\">Name is required!</span>\n      </div>\n      <div class=\"input-container\">\n        <textarea formControlName=\"description\" placeholder=\"Description\" class=\"full-width\"></textarea>\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.description.invalid && (productForm.controls.description.dirty || productForm.controls.description.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.description.errors.required\">Description is required!</span>\n      </div>\n      <div class=\"input-container\">\n        <input type=\"text\"  formControlName=\"price\" placeholder=\"Price\" class=\"full-width\">\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.price.invalid && (productForm.controls.price.dirty || productForm.controls.price.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.price.errors.required\">Price is required!</span>\n      </div>\n      <div class=\"input-container\">\n        <input type=\"text\"  formControlName=\"quantity\" placeholder=\"Quantity\" class=\"full-width\">\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.quantity.invalid && (productForm.controls.quantity.dirty || productForm.controls.quantity.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.quantity.errors.required\">Quantity is required!</span>\n      </div>\n      <div class=\"input-container\" *ngIf=\"isEdit != true\">\n        <button type=\"submit\" [disabled]=\"productForm.invalid\">\n          Save\n        </button>\n      </div>\n      <div class=\"input-container\" *ngIf=\"isEdit == true\">\n        <button type=\"Button\" [disabled]=\"productForm.invalid\" (click)=\"editData()\">\n          Update\n        </button>\n      </div>\n    </form>\n</div>\n  "
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-06afa8d2fded1b379baeee63b9625c42",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentYear",
                    "defaultValue": "new Date().getFullYear()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "title",
                    "defaultValue": "'crud-operations'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'crud-operations';\n  currentYear = new Date().getFullYear();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>  "
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-c5fe18d04cd74e35b83932fc0aca3976-1",
            "file": "src/app/layout/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabledFlag",
                    "line": 9,
                    "type": "boolean"
                },
                {
                    "name": "FormValue",
                    "line": 10,
                    "type": "any"
                },
                {
                    "name": "labelbutton",
                    "line": 8,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "clickItemButtton",
                    "defaultValue": "new EventEmitter<any>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "functionClick",
                    "args": [
                        {
                            "name": "value",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent implements OnInit {\n  @Input() labelbutton: string;\n  @Input() disabledFlag: boolean;\n  @Input() FormValue: any;\n  @Output() clickItemButtton = new EventEmitter<any>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  functionClick(value: any): any {\n    this.clickItemButtton.emit(value);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<button type=\"Button\" [disabled]=\"disabledFlag\" (click)=\"functionClick(FormValue)\">\n    {{labelbutton}}\n</button>\n"
        },
        {
            "name": "DashboardCardComponent",
            "id": "component-DashboardCardComponent-f37a95685835b5bdfb0da1218574cda4",
            "file": "src/app/dashboard/dashboard-card/dashboard-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-card",
            "styleUrls": [
                "./dashboard-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "productData",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "newItemEvent",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "addNewItem",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 13,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard-card',\n  templateUrl: './dashboard-card.component.html',\n  styleUrls: ['./dashboard-card.component.scss']\n})\nexport class DashboardCardComponent implements OnInit {\n\n  @Input() productData: any;\n  @Output() newItemEvent = new EventEmitter<string>();\n\n  addNewItem(value: string): any {\n    this.newItemEvent.emit(value);\n  }\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n    // display: flex;\n    display: grid;\n    grid-template-columns: repeat(4, 1fr); \n    grid-gap: 1em;\n    // flex-wrap: wrap;\n    // justify-content: space-evenly;\n  }\n.img__wrap {\n    position: relative;\n    background-color: #444;\n    color: #fff;\n    border-radius: 5px;\n    padding: 20px;\n    font-size: 150%;\n    margin: 5px;\n  }\n  .img__img {\n    opacity: 1;\n    display: block;\n    transition: .5s ease;\n    backface-visibility: hidden;\n    height: 400px;\n    width: 400px;\n  }\n  .img__description {\n    transition: .5s ease;\n    opacity: 0;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    -ms-transform: translate(-50%, -50%);\n    text-align: center;\n  }\n    \n  .img__wrap:hover .img__img {\n    opacity: 0.3;\n  }\n  \n  .img__wrap:hover .img__description {\n    opacity: 1;\n  }\n  .book-name {\n    font-family: GT Super Bold, serif;\n    line-height: 1.25;\n    font-size: 20px;\n    letter-spacing: -0.1px;\n    font-weight: bold;\n  }\n  .book-author {\n    font-family: GT Super Bold, serif;\n    line-height: 1.25;\n    font-size: 14px;\n    letter-spacing: -0.1px;\n  }\n  \n  @media (max-width: 760px) {\n    .wrapper {\n      grid-template-columns: repeat(1, 1fr); \n    }\n    .img__img {\n      width: 100%;\n    }\n  }",
                    "styleUrl": "./dashboard-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n    <div class=\"img__wrap\" *ngFor=\"let product of productData; let i = index;\" (click)=\"addNewItem(product.id)\" (keyup.enter)=\"addNewItem(product.id)\" tabindex=\"{{i+5}}\">\n        <img [src]=\"product.img_path\" class=\"img__img\" [alt]=\"product.name\">\n        <div class=\"img__description\"> \n            <div class=\"product-name\">{{product.name}}<div>\n            <div class=\"product-price\">${{product.price}}<div>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-f4709ee3f38a12b9283f6483c1329662",
            "file": "src/app/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "productData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "getBooksData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "navigationRouteString",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonService } from '../common.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n\n  productData: any;\n  constructor(\n    private commonService: CommonService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.getBooksData();\n  }\n  getBooksData(): void {\n    this.commonService.getProducts().subscribe((data) => {\n      this.productData = data;\n    });\n  }\n  navigationRouteString(id): any {\n    this.router.navigate(['/product/', id]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "commonService",
                        "type": "CommonService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-dashboard-card [productData]=\"productData\" (newItemEvent)=\"navigationRouteString($event)\"></app-dashboard-card>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2b0aecd79a778e6b50e6f6ef0a84a47a",
            "file": "src/app/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ThemeService } from '../../shared/services/theme.service';\nimport { LoginRegistrationSetupService } from '../../setup/login-registration-setup.service';\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n  constructor(\n    ) { }\n    ngOnInit(): void {\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar {\n  display: flex;\n  flex: 100%;\n  flex-wrap: wrap;\n    overflow: hidden;\n    background-color: #333;\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;\n}\n.navbar a {\n  float: left;\n  font-size: 16px;\n  color: white;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n.navbar a.active {\n  background-color: #4c61af;\n  color: white;\n}\n.dropdown {\n  float: left;\n  overflow: hidden;\n}\n\n.dropdown .dropbtn {\n  font-size: 16px;  \n  border: none;\n  outline: none;\n  color: white;\n  padding: 14px 16px;\n  background-color: inherit;\n  font-family: inherit;\n  margin: 0;\n}\n\n.navbar a:hover, .dropdown:hover .dropbtn {\n  background-color: #4c61af;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f9f9f9;\n  min-width: 170px;\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  float: none;\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n  text-align: left;\n}\n\n.dropdown-content a:hover {\n  background-color: #4c61af;\n}\n\n.dropdown:hover .dropdown-content {\n  display: block;\n}\n:host {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n.align-right {\n  margin-left: auto;\n}",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"navbar\">\n    <a routerLink=\"./home\" routerLinkActive=\"active\">Home</a>\n    <a routerLink=\"./crud-opration/product\" routerLinkActive=\"active\">Crud Operations</a>\n    <div class=\"dropdown\">\n        <button class=\"dropbtn\">NgRx \n          <i class=\"fa fa-caret-down\"></i>\n        </button>\n        <div class=\"dropdown-content\">\n          <a routerLink=\"./ngrx-crud-opration/product-list\" routerLinkActive=\"active\">Product List</a>\n          <a routerLink=\"./ngrx-crud-opration/add-product\" routerLinkActive=\"active\">Add Product</a>\n        </div>\n    </div> \n    <!--<div class=\"dropdown\">\n      <button class=\"dropbtn\">Practice Assignment \n        <i class=\"fa fa-caret-down\"></i>\n      </button>\n      <div class=\"dropdown-content\">\n        <a routerLink=\"./flex-Layout\" routerLinkActive=\"active\">Flexbox Layout</a>\n        <a routerLink=\"./grid-layout\" routerLinkActive=\"active\">Grid Layout</a>\n         <a routerLink=\"./ngrx-tutorial-example1\" routerLinkActive=\"active\">NgRx Example1</a>\n        <a routerLink=\"./ngrx-tutorial-example2\" routerLinkActive=\"active\">NgRx Example2</a> \n      </div>\n    </div> -->\n  </div>"
        },
        {
            "name": "HeaderStoryComponent",
            "id": "component-HeaderStoryComponent-486a53370afe35c23b06113a360f32f6",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-story-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<div class=\"navbar\">\n   <div class=\"tooltip\">\n     <span class=\"tooltiptext\">Switch Theme</span><label class=\"switch\"><input type=\"checkbox\" id=\"darkTheme\"> <span class=\"slider round\"></span></label>\n   </div>\n   <a >Home</a>\n   <a >Crud Operations</a>\n   <div class=\"dropdown\">\n       <button class=\"dropbtn\">NgRx\n         <i class=\"fa fa-caret-down\"></i>\n       </button>\n       <div class=\"dropdown-content\">\n         <a >Product List</a>\n         <a >Add Product</a>\n       </div>\n   </div>\n   <div class=\"dropdown\">\n     <button class=\"dropbtn\">Practice Assignment\n       <i class=\"fa fa-caret-down\"></i>\n     </button>\n     <div class=\"dropdown-content\">\n       <a >Flexbox Layout</a>\n       <a >Grid Layout</a>\n       <a >NgRx Example1</a>\n       <a >NgRx Example2</a>\n     </div>\n   </div>\n   <a class=\"align-right\">Logout</a>\n </div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-story-header',\n  template: `\n <div class=\"navbar\">\n    <div class=\"tooltip\">\n      <span class=\"tooltiptext\">Switch Theme</span><label class=\"switch\"><input type=\"checkbox\" id=\"darkTheme\"> <span class=\"slider round\"></span></label>\n    </div>\n    <a >Home</a>\n    <a >Crud Operations</a>\n    <div class=\"dropdown\">\n        <button class=\"dropbtn\">NgRx\n          <i class=\"fa fa-caret-down\"></i>\n        </button>\n        <div class=\"dropdown-content\">\n          <a >Product List</a>\n          <a >Add Product</a>\n        </div>\n    </div>\n    <div class=\"dropdown\">\n      <button class=\"dropbtn\">Practice Assignment\n        <i class=\"fa fa-caret-down\"></i>\n      </button>\n      <div class=\"dropdown-content\">\n        <a >Flexbox Layout</a>\n        <a >Grid Layout</a>\n        <a >NgRx Example1</a>\n        <a >NgRx Example2</a>\n      </div>\n    </div>\n    <a class=\"align-right\">Logout</a>\n  </div>\n  `,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderStoryComponent {\n  constructor(){}\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".navbar {\n  display: flex;\n  flex: 100%;\n  flex-wrap: wrap;\n    overflow: hidden;\n    background-color: #333;\n    font-family: -apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif;\n}\n.navbar a {\n  float: left;\n  font-size: 16px;\n  color: white;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n}\n.navbar a.active {\n  background-color: #4c61af;\n  color: white;\n}\n.dropdown {\n  float: left;\n  overflow: hidden;\n}\n\n.dropdown .dropbtn {\n  font-size: 16px;  \n  border: none;\n  outline: none;\n  color: white;\n  padding: 14px 16px;\n  background-color: inherit;\n  font-family: inherit;\n  margin: 0;\n}\n\n.navbar a:hover, .dropdown:hover .dropbtn {\n  background-color: #4c61af;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f9f9f9;\n  min-width: 170px;\n  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  float: none;\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n  text-align: left;\n}\n\n.dropdown-content a:hover {\n  background-color: #4c61af;\n}\n\n.dropdown:hover .dropdown-content {\n  display: block;\n}\n:host {\n  background-color: var(--primary-color);\n  color: var(--text-color);\n}\n.align-right {\n  margin-left: auto;\n}\n.switch {\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  height: 34px;\n  margin: 8px;\n}\n\n.switch input { \n  opacity: 0;\n  width: 0;\n  height: 0;\n}\n\n.slider {\n  position: absolute;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: #ccc;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\n.slider:before {\n  position: absolute;\n  content: \"\";\n  height: 26px;\n  width: 26px;\n  left: 4px;\n  bottom: 4px;\n  background-color: white;\n  -webkit-transition: .4s;\n  transition: .4s;\n}\n\ninput:checked + .slider {\n  background-color: #2196F3;\n}\n\ninput:focus + .slider {\n  box-shadow: 0 0 1px #2196F3;\n}\n\ninput:checked + .slider:before {\n  -webkit-transform: translateX(26px);\n  -ms-transform: translateX(26px);\n  transform: translateX(26px);\n}\n\n/* Rounded sliders */\n.slider.round {\n  border-radius: 34px;\n}\n\n.slider.round:before {\n  border-radius: 50%;\n}",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 37
            }
        },
        {
            "name": "IndiviualProductCardComponent",
            "id": "component-IndiviualProductCardComponent-043b039e2abbe352a3c39ac016ef9b6b",
            "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-indiviual-product-card",
            "styleUrls": [
                "./indiviual-product-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./indiviual-product-card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "product",
                    "line": 10,
                    "type": "any"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-indiviual-product-card',\n  templateUrl: './indiviual-product-card.component.html',\n  styleUrls: ['./indiviual-product-card.component.scss']\n})\nexport class IndiviualProductCardComponent implements OnInit {\n\n  @Input() product: any;\n  constructor() {}\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container-product {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    justify-items: center;\n    padding: 50px;\n    border-radius: 15px;\n    box-shadow: 0px 7px 10px rgba(0, 0, 0, 0.5);\n    width: 90%;\n    margin: 0 auto;\n    text-align: center;\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n    font-weight: normal;\n}\n.img__img {\n    width: 500px;\n    height: 500px;\n}\n.content__name {\n    margin: 10px;\n    font-size: 29px;\n    font-weight: 500;\n}\n.content__description {\n    font-size: 15px;\n    margin: 10px;\n}\n.content__price {\n    font-size: 21px;\n    margin: 10px;\n    font-weight: 500;\n}\n\n\n@media (max-width: 760px) {\n    .container-product {\n        grid-template-columns: repeat(1, 1fr);\n        padding: 10px;\n    }\n    .img__img {\n        width: 100%;\n        height: 100%;\n    }\n}",
                    "styleUrl": "./indiviual-product-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container-product\">\n    <div class=\"img__wrapper\">\n        <img [src]=\"product?.img_path\" class=\"img__img\" [alt]=\"product?.name\">\n    </div>\n    <div class=\"content__wrapper\">\n        <div class=\"heading\">Product Details</div>\n        <div class=\"content__name\"> {{product?.name}} </div>\n        <div class=\"content__description\"> {{product?.description}} </div>\n        <div class=\"content__price\">Price: $ {{product?.price}} </div>\n        <div class=\"content__price\">Avaible quentity: {{product?.quantity}} </div>\n    </div>\n</div>\n"
        },
        {
            "name": "IndiviualProductComponent",
            "id": "component-IndiviualProductComponent-7896a66ce59449e380d1f325a0e59b7b",
            "file": "src/app/dashboard/indiviual-product/indiviual-product.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-indiviual-product",
            "styleUrls": [
                "./indiviual-product.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./indiviual-product.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "productData",
                    "type": "Product",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "productId",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonService } from '../../common.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Product } from '../../product/store/product.model';\n\n@Component({\n  selector: 'app-indiviual-product',\n  templateUrl: './indiviual-product.component.html',\n  styleUrls: ['./indiviual-product.component.scss']\n})\nexport class IndiviualProductComponent implements OnInit {\n\n  productId: any;\n  productData: Product;\n  constructor(\n    private activatedRoute: ActivatedRoute,\n    private commonService: CommonService\n  ) {\n    const prodid = 'id';\n    this. productId = this.activatedRoute.snapshot.params[prodid];\n  }\n\n  ngOnInit(): void {\n    this.getData();\n  }\n  getData(): any {\n    this.commonService.getProductData(this.productId).subscribe((data) => {\n      this.productData = data;\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./indiviual-product.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-indiviual-product-card [product]=\"productData\"></app-indiviual-product-card>\n"
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-22e6d271577060261a6d1ab4bc7dcdf0",
            "file": "src/app/layout/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [
                "./layout.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "darkTheme",
                    "defaultValue": "new FormControl(false)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isChecked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isLoginUser",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "userName",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getUserStatus",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "theme",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { ThemeService } from '../../shared/services/theme.service';\nimport { LoginRegistrationSetupService } from '../../setup/login-registration-setup.service';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-layout',\n  templateUrl: './layout.component.html',\n  styleUrls: ['./layout.component.scss']\n})\nexport class LayoutComponent implements OnInit {\n\n  darkTheme = new FormControl(false);\n  userName: any;\n  isLoginUser: boolean;\n  isChecked: boolean;\n  constructor(\n    private themeService: ThemeService,\n    private loginRegistrationSetupService: LoginRegistrationSetupService,\n    private router: Router\n  ) {}\n\n  ngOnInit(): void {\n    this.isChecked = false;\n    this.getUserStatus();\n    this.theme(false);\n  }\n  getUserStatus(): any {\n    this.isChecked = false;\n    if (localStorage.getItem('user') !== null) {\n      this.isLoginUser = true;\n    }else if (localStorage.getItem('user') === null) {\n      this.isLoginUser = false;\n    }\n    this.loginRegistrationSetupService.getData().subscribe(wrapper => {\n      if (wrapper) {\n      this.isLoginUser = true;\n    }else {\n      this.isLoginUser = false;\n    }\n   });\n  }\n  theme(event): any {\n    if (event) {\n      this.themeService.toggleDark();\n    } else {\n      this.themeService.toggleLight();\n    }\n    this.isChecked = !event;\n  }\n  logout(): any {\n    this.loginRegistrationSetupService.Logout();\n    this.loginRegistrationSetupService.sendData(false);\n    this.router.navigate(['/home']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".header-top{\n    display: grid;\n    justify-items: end;\n}\ninput[type=\"checkbox\" i] {\n  display: none;\n}\n.button-format {\n  background-color: #4c61af;\n  color: white;\n  font-size: 16px;\n  text-align: center;\n  padding: 14px 16px;\n  text-decoration: none;\n  cursor: pointer;\n  width: auto;\n}\n.label-Switch-theme {\n  font-size: 20px;\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n  font-weight: 500;\n  align-items: center;\n\n}",
                    "styleUrl": "./layout.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "themeService",
                        "type": "ThemeService"
                    },
                    {
                        "name": "loginRegistrationSetupService",
                        "type": "LoginRegistrationSetupService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "themeService",
                        "type": "ThemeService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginRegistrationSetupService",
                        "type": "LoginRegistrationSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"header-top m-1\">\n     <span class=\"right-side-top\"> \n        <button class=\"button-format m-1\"  tabindex=\"1\" (click)=\"theme(isChecked)\">Switch Theme</button>\n        <button class=\"button-format m-1\" *ngIf=\"isLoginUser==true\" (click)=\"logout()\"  tabindex=\"2\">Logout</button>\n        <button class=\"button-format m-1\" *ngIf=\"isLoginUser!=true\" routerLink=\"/home\"  tabindex=\"2\">Home</button>\n        <button class=\"button-format m-1\" *ngIf=\"isLoginUser!=true\" routerLink=\"/user/login\"  tabindex=\"3\">Login User</button>\n        <button class=\"button-format m-1\" *ngIf=\"isLoginUser!=true\" routerLink=\"/user/registration\" tabindex=\"4\">Register User</button>\n    </span>\n</div>\n<div *ngIf=\"isLoginUser==true\">\n  <app-header></app-header>\n</div>\n<router-outlet></router-outlet> "
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-caa383e9e94ab74b77190688b9f9fe05",
            "file": "src/app/setup/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isLogin",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "LoginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "form",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { LoginRegistrationSetupService } from '../login-registration-setup.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  LoginForm: FormGroup;\n  isLogin: boolean;\n  constructor(\n    private fb: FormBuilder,\n    private loginRegistrationSetupService: LoginRegistrationSetupService,\n    private router: Router\n) { }\n\n  ngOnInit(): void {\n    this.createForm();\n  }\n  createForm(): void{\n    this.LoginForm = this.fb.group({\n      user_name:  ['', [Validators.required, Validators.maxLength(200), Validators.minLength(2)]],\n      password: ['', [Validators.required, Validators.maxLength(10), Validators.minLength(2)]],\n    });\n  }\n  onSubmit(form): void {\n    this.loginRegistrationSetupService.LoginUser(form.user_name, form.password).subscribe((data) => {\n      if (data[0] === undefined) {\n        alert('User is not register!');\n        this.isLogin = false;\n      }else {\n        alert('Login successful!');\n        this.loginRegistrationSetupService.sendData(true);\n        this.isLogin = true;\n        const jsonData = JSON.stringify(data[0]);\n        localStorage.setItem('user', jsonData);\n        this.router.navigate(['/home']);\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-width {\n    width: 40%;\n}\n@media (max-width: 760px) {\n    .form-width {\n        width: 70%;\n    }\n}",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "loginRegistrationSetupService",
                        "type": "LoginRegistrationSetupService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginRegistrationSetupService",
                        "type": "LoginRegistrationSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container form-width m-1\">\n    <div class=\"heading\">User Login</div>\n    <form [formGroup]=\"LoginForm\" (ngSubmit)=\"onSubmit(LoginForm.value)\">\n      <div class=\"input-container\">\n        <input type=\"text\" formControlName=\"user_name\" placeholder=\"User Name\" class=\"full-width\">\n      </div>\n      <div class=\"error-msg\" *ngIf=\"LoginForm.controls.user_name.invalid && (LoginForm.controls.user_name.dirty || LoginForm.controls.user_name.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"LoginForm.controls.user_name.errors.required\">User name is required!</span>\n        <span class=\"error-msg\" *ngIf=\"LoginForm.controls.user_name.errors.minlength\">Minimum 2 characters required!</span>\n        <span class=\"error-msg\" *ngIf=\"LoginForm.controls.user_name.errors.maxlength\">Maximum 200  characters required!</span>\n        <!-- <span *ngIf=\"LoginForm.controls.user_name.errors.pattern\">Invalid value for this field</span> -->\n    </div>\n      <div class=\"input-container\">\n        <input type=\"password\"  formControlName=\"password\" placeholder=\"password\" class=\"full-width\">\n      </div> \n      <div class=\"error-msg\" *ngIf=\"LoginForm.controls.password.invalid && (LoginForm.controls.password.dirty || LoginForm.controls.password.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"LoginForm.controls.password.errors.required\">Password is required!</span>\n        <span class=\"error-msg\" *ngIf=\"LoginForm.controls.password.errors.minlength\">Minimum 2 characters required!</span>\n        <span class=\"error-msg\" *ngIf=\"LoginForm.controls.password.errors.maxlength\">Maximum 10  characters required!</span>\n    </div>\n      <div class=\"input-container\">\n        <button type=\"submit\">\n          Login\n        </button>\n      </div>\n    </form>\n</div>\n"
        },
        {
            "name": "ProductListComponent",
            "id": "component-ProductListComponent-436b2d20a90d76e46383cdcbf8955514",
            "file": "src/app/product/product-list/product-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-product-list",
            "styleUrls": [
                "./product-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./product-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "productList$",
                    "type": "Observable<Product[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "products",
                    "defaultValue": "[]",
                    "type": "Product[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport * as formActions from '../store/product.actions';\nimport { Product } from '../store/product.model';\nimport { Observable } from 'rxjs';\nimport { selectProduct } from '../store/product.selecters';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.scss']\n})\nexport class ProductListComponent implements OnInit {\n\n  products: Product[] = [];\n  productList$: Observable<Product[]>;\n  constructor(\n  private store: Store,\n  private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(formActions.loadProducts());\n    this.getLinks();\n  }\n  getLinks(): void {\n    this.productList$ = this.store.pipe(select(selectProduct));\n  }\n  edit(id): void{\n    this.router.navigate(['./ngrx-crud-opration/edit-product/', id]);\n  }\n  delete(id): void {\n    const ids = {id};\n    this.store.dispatch(formActions.deleteProduct(ids));\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n@media only screen \nand (min-width: 760px), (min-device-width: 768px) \nand (min-deviace-width: 1024px)   {\n\n\ntable{\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n    }\nthead {\n    color: #4c61af;\n}\ntr{\n    border-bottom: 1px solid rgba(0,0,0,0.12);\n}\ntbody {\n    display: table-row-group;\n    vertical-align: middle;\n    border-color: inherit;\n}\ntable, thead, tbody, th, td, tr {\n    padding: 20px;\n    font-size: 18px;\n}\ntd {\n    color: black !important;\n}\n// .table-row:nth-child(odd) {\n//     background: #ccc;\n//     }\n}\n@media only screen \nand (max-width: 760px), (min-device-width: 768px) \nand (max-deviace-width: 1024px)  {\n    .container {\n        margin: 0 auto;\n        padding: 5px;\n        width: 90%;\n    }\n    /* Force table to not be like tables anymore */\n    table, thead, tbody, th, td, tr {\n        display: block;\n        font-size: 14px;\n    }\n\n    /* Hide table headers (but not display: none;, for accessibility) */\n    thead tr {\n        position: absolute;\n        top: -9999px;\n        left: -9999px;\n    }\n\n    tr {\n        margin: 0 0 1rem 0;\n    }\n\n    tr:nth-child(odd) {\n        background: #ccc;\n    }\n\n    td {\n        /* Behave  like a \"row\" */\n        border: none;\n        border-bottom: 1px solid #eee;\n        position: relative;\n        padding-left: 50%;\n        color: black !important;\n    }\n\n    td:before {\n        /* Now like a table header */\n        position: absolute;\n        /* Top/left values mimic padding */\n        top: 0;\n        left: 6px;\n        width: 45%;\n        padding-right: 10px;\n        white-space: nowrap;\n    }\n\n    /*\n    Label the data\n    You could also use a data-* attribute and content for this. That way \"bloats\" the HTML, this way means you need to keep HTML and CSS in sync. Lea Verou has a clever way to handle with text-shadow.\n    */\n    td:nth-of-type(1):before { content: \"Id\"; }\n    td:nth-of-type(2):before { content: \"Name\"; }\n    td:nth-of-type(3):before { content: \"Description\"; }\n    td:nth-of-type(4):before { content: \"Price\"; }\n    td:nth-of-type(5):before { content: \"Quntity\"; }\n    td:nth-of-type(6):before { content: \"Edit\"; }\n    td:nth-of-type(7):before { content: \"Delete\"; }\n}",
                    "styleUrl": "./product-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"heading\">NgRx Product List</div>\n  <table>\n    <thead>\n      <tr>\n        <th>ID</th>\n        <th>Name</th>\n        <th>Description</th>\n        <th>Price</th>\n        <th>Quntity</th>\n        <th>Edit</th>\n        <th>Delete</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let link of productList$ | async\" classe=\"table-row\">\n        <td>{{link.id}}</td>\n        <td>{{link.name}}</td>\n        <td>{{link.description}}</td>\n        <td>{{link.price}}</td>\n        <td>{{link.quantity}}</td>\n        <td>\n            <button (click)=\"edit(link.id)\">Edit</button>\n        </td> \n        <td>\n            <button (click)=\"delete(link.id)\">Delete</button>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n"
        },
        {
            "name": "ProductsCrudOprationComponent",
            "id": "component-ProductsCrudOprationComponent-9a37b74eb21fb834b9a3df76c83651a8",
            "file": "src/app/crud-oprations/products-crud-opration/products-crud-opration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-products-crud-opration",
            "styleUrls": [
                "./products-crud-opration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./products-crud-opration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDelete",
                    "defaultValue": "'delete'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "buttonEdit",
                    "defaultValue": "'Edit'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "buttonLable",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isDelete",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isEdit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isSubmit",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "productForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "products",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "selectedProduct",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "sub",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "userStatus",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "edit",
                    "args": [
                        {
                            "name": "id",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80
                },
                {
                    "name": "getLinks",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "onSubmit",
                    "args": [
                        {
                            "name": "data",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patchForm",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CommonService } from '../../common.service';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-products-crud-opration',\n  templateUrl: './products-crud-opration.component.html',\n  styleUrls: ['./products-crud-opration.component.scss']\n})\nexport class ProductsCrudOprationComponent implements OnInit {\n\n  products: any;\n  selectedProduct: any;\n  productForm: FormGroup;\n  isEdit: boolean;\n  userStatus: any;\n  buttonLable: any;\n  buttonEdit = 'Edit';\n  buttonDelete = 'delete';\n  sub: Subscription;\n  isDelete: boolean;\n  isSubmit: boolean;\n  constructor(\n    private commonService: CommonService,\n    private fb: FormBuilder,\n    ) {}\n\n  ngOnInit(): void{\n    this.createForm();\n    this.getLinks();\n  }\n  createForm(): void{\n    this.buttonLable = 'save';\n    this.productForm = this.fb.group({\n      id:  [''],\n      name: ['', Validators.required],\n      description: ['', [Validators.required]],\n      price: ['', [Validators.required]],\n      quantity: ['', [Validators.required]],\n      img_path: ['assets/img/box.jpg']\n    });\n  }\n  patchForm(data?: any): void{\n    this.productForm = this.fb.group({\n      id:  ['' || data.id],\n      name: ['' || data.name, Validators.required],\n      description: ['' || data.description, [Validators.required]],\n      price: ['' || data.price, [Validators.required]],\n      quantity: ['' || data.quantity, [Validators.required]],\n      img_path: ['assets/img/box.jpg']\n    });\n  }\n  delete(id): void {\n    this.commonService.deleteProduct(id).subscribe((data) => {\n      this.isDelete = true;\n      this.getLinks();\n    });\n  }\n  getLinks(): void {\n    this.sub = this.commonService.getProducts().subscribe(\n      (data) => { this.products = data; },\n      // (error) =>  { const errmsg = 'HTTP Error ' + error; alert(errmsg); }\n    );\n  }\n  onSubmit(data): void{\n    this.commonService.createProduct(data.value).subscribe(() => {\n      this.getLinks();\n      this.productForm.reset();\n      this.isSubmit = true;\n    });\n  }\n  edit(id): void {\n    this.buttonLable =  'Edit';\n    this.commonService.getProductData(id).subscribe((data) => {\n      this.patchForm(data);\n      this.isEdit = true;\n    });\n  }\n  editData(): void{\n    this.commonService.updateProduct(this.productForm.value.id, this.productForm.value).subscribe((data) => {\n      this.getLinks();\n      this.productForm.reset();\n      this.isEdit = false;\n      this.buttonLable =  'SAVE';\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-container{\n    padding: 10px;\n}\n\n@media only screen \nand (min-width: 760px), (min-device-width: 768px) \nand (min-deviace-width: 1024px)   {\ntable{\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0;\n    }\nthead {\n    color: #4c61af;\n}\ntr{\n    border-bottom: 1px solid rgba(0,0,0,0.12);\n}\ntbody {\n    display: table-row-group;\n    vertical-align: middle;\n    border-color: inherit;\n}\ntable, thead, tbody, th, td, tr {\n    padding: 20px;\n    font-size: 18px;\n}\ntd {\n    color: black !important;\n}\n// .table-row:nth-child(odd) {\n//     background: #ccc;\n//     }\n}\n@media only screen \nand (max-width: 760px), (min-device-width: 768px) \nand (max-deviace-width: 1024px)  {\n    .container {\n        margin: 0 auto;\n        padding: 5px;\n        width: 90%;\n    }\n    /* Force table to not be like tables anymore */\n    table, thead, tbody, th, td, tr {\n        display: block;\n        font-size: 14px;\n    }\n\n    /* Hide table headers (but not display: none;, for accessibility) */\n    thead tr {\n        position: absolute;\n        top: -9999px;\n        left: -9999px;\n    }\n\n    tr {\n        margin: 0 0 1rem 0;\n    }\n\n    tr:nth-child(odd) {\n        background: #ccc;\n    }\n\n    td {\n        /* Behave  like a \"row\" */\n        border: none;\n        border-bottom: 1px solid #eee;\n        position: relative;\n        padding-left: 50%;\n        color: black !important;\n    }\n\n    td:before {\n        /* Now like a table header */\n        position: absolute;\n        /* Top/left values mimic padding */\n        top: 0;\n        left: 6px;\n        width: 45%;\n        padding-right: 10px;\n        white-space: nowrap;\n    }\n\n    /*\n    Label the data\n    You could also use a data-* attribute and content for this. That way \"bloats\" the HTML, this way means you need to keep HTML and CSS in sync. Lea Verou has a clever way to handle with text-shadow.\n    */\n    td:nth-of-type(1):before { content: \"Id\"; }\n    td:nth-of-type(2):before { content: \"Name\"; }\n    td:nth-of-type(3):before { content: \"Description\"; }\n    td:nth-of-type(4):before { content: \"Price\"; }\n    td:nth-of-type(5):before { content: \"Quntity\"; }\n    td:nth-of-type(6):before { content: \"Edit\"; }\n    td:nth-of-type(7):before { content: \"Delete\"; }\n}",
                    "styleUrl": "./products-crud-opration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "commonService",
                        "type": "CommonService"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "commonService",
                        "type": "CommonService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n    <div class=\"heading\">Add Product</div>\n    <form [formGroup]=\"productForm\">\n      <div class=\"input-container\">\n        <input type=\"text\"  formControlName=\"name\" placeholder=\"Name\" class=\"full-width\">\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.name.invalid && (productForm.controls.name.dirty || productForm.controls.name.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.name.errors.required\">Name is required!</span>\n      </div>\n      <div class=\"input-container\">\n        <textarea formControlName=\"description\" placeholder=\"Description\" class=\"full-width\"></textarea>\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.description.invalid && (productForm.controls.description.dirty || productForm.controls.description.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.description.errors.required\">Description is required!</span>\n      </div>\n      <div class=\"input-container\">\n        <input type=\"text\"  formControlName=\"price\" placeholder=\"Price\" class=\"full-width\">\n      </div> \n      <div class=\"error-msg\" *ngIf=\"productForm.controls.price.invalid && (productForm.controls.price.dirty || productForm.controls.price.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.price.errors.required\">Price is required!</span>\n      </div>\n      <div class=\"input-container\">\n        <input type=\"text\"  formControlName=\"quantity\" placeholder=\"Quantity\" class=\"full-width\">\n      </div>\n      <div class=\"error-msg\" *ngIf=\"productForm.controls.quantity.invalid && (productForm.controls.quantity.dirty || productForm.controls.quantity.touched)\" class=\"text-danger\">\n        <span class=\"error-msg\" *ngIf=\"productForm.controls.quantity.errors.required\">Quantity is required!</span>\n      </div>\n      <div class=\"input-container\" *ngIf=\"isEdit != true\">\n        <app-button [labelbutton]=\"buttonLable\" [disabledFlag]=\"productForm.invalid\" [FormValue]=\"productForm.value\" (click)=\"onSubmit(productForm)\"></app-button>\n      </div>\n      <div class=\"input-container\" *ngIf=\"isEdit == true\">\n        <app-button [labelbutton]=\"buttonLable\" [disabledFlag]=\"productForm.invalid\" [FormValue]=\"productForm.value\" (click)=\"editData(productForm)\"></app-button>\n      </div>\n    </form>\n    <hr class=\"solid\">\n  <div class=\"heading\">Link Products</div>\n    <table>\n      <thead>\n        <tr>\n          <th>ID</th>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Price</th>\n          <th>Quantity</th>\n          <th>Edit</th>\n          <th>Delete</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr *ngFor=\"let link of products\" class=\"table-row\">\n          <td>{{link.id}}</td>\n          <td>{{link.name}}</td>\n          <td>{{link.description}}</td>\n          <td>{{link.price}}</td>\n          <td>{{link.quantity}}</td>\n          <td>\n          <app-button [labelbutton]=\"buttonEdit\" [disabledFlag]=\"false\" [FormValue]=\"link.id\" (click)=\"edit(link.id)\"></app-button>\n            <!-- <button (click)=\"edit(link.id)\">Edit</button> -->\n          </td>\n          <td>\n            <app-button [labelbutton]=\"buttonDelete\" [disabledFlag]=\"false\" [FormValue]=\"link.id\" (click)=\"delete(link.id)\"></app-button>\n            <!-- <button (click)=\"delete(link.id)\">Delete</button> -->\n          </td>\n        </tr>\n      </tbody>\n    </table>\n</div>"
        },
        {
            "name": "UserRegistrationComponent",
            "id": "component-UserRegistrationComponent-37902e2feda1fdc8964bca448a15c13a",
            "file": "src/app/setup/user-registration/user-registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-registration",
            "styleUrls": [
                "./user-registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "RegistrationForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { LoginRegistrationSetupService } from '../login-registration-setup.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-user-registration',\n  templateUrl: './user-registration.component.html',\n  styleUrls: ['./user-registration.component.scss']\n})\nexport class UserRegistrationComponent implements OnInit {\n\n  RegistrationForm: FormGroup;\n  constructor(\n    private fb: FormBuilder,\n    private loginRegistrationSetupService: LoginRegistrationSetupService,\n    private router: Router\n) { }\n\n  ngOnInit(): void {\n    this.createForm();\n\n  }\n  createForm(): void{\n    this.RegistrationForm = this.fb.group({\n      user_name:  ['', [Validators.required, Validators.maxLength(200), Validators.minLength(2)]],\n      password: ['', [Validators.required, Validators.maxLength(10), Validators.minLength(2)]],\n      confirm_password: ['', [Validators.required, Validators.maxLength(10), Validators.minLength(2)]],\n    });\n  }\n  onSubmit(): void {\n    if (this.RegistrationForm.value.password === this.RegistrationForm.value.confirm_password) {\n      const user = {\n        user_name: this.RegistrationForm.value.uname,\n        password: this.RegistrationForm.value.password,\n      };\n      this.loginRegistrationSetupService.registerUser(user).subscribe((data) => {\n        alert('User registered successfully!');\n        this.router.navigate(['/user/login']);\n      });\n    }else {\n      alert('Password and confirm password not maching!');\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".form-width {\n    width: 40%;\n}\n@media (max-width: 760px) {\n    .form-width {\n        width: 70%;\n    }\n}",
                    "styleUrl": "./user-registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "loginRegistrationSetupService",
                        "type": "LoginRegistrationSetupService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "loginRegistrationSetupService",
                        "type": "LoginRegistrationSetupService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container form-width m-1\">\n    <div class=\"heading\">User Registration</div>\n    <form [formGroup]=\"RegistrationForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"input-container\">\n           <input type=\"text\" formControlName=\"user_name\" placeholder=\"User Id\" class=\"full-width\">\n        </div>\n        <div class=\"error-msg\" *ngIf=\"RegistrationForm.controls.user_name.invalid && (RegistrationForm.controls.user_name.dirty || RegistrationForm.controls.user_name.touched)\" class=\"text-danger\">\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.user_name.errors.required\">User name is required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.user_name.errors.minlength\">Minimum 2 characters required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.user_name.errors.maxlength\">Maximum 200  characters required!</span>\n        </div>\n        <div class=\"input-container\">\n            <input type=\"password\"  formControlName=\"password\" placeholder=\"password\" class=\"full-width\">\n        </div> \n        <div class=\"error-msg\" *ngIf=\"RegistrationForm.controls.password.invalid && (RegistrationForm.controls.password.dirty || RegistrationForm.controls.password.touched)\" class=\"text-danger\">\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.password.errors.required\">Password is required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.password.errors.minlength\">Minimum 2 characters required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.password.errors.maxlength\">Maximum 10  characters required!</span>\n        </div>\n        <div class=\"input-container\">\n            <input type=\"password\"  formControlName=\"confirm_password\" placeholder=\"Confirm Password\" class=\"full-width\">\n        </div> \n        <div class=\"error-msg\" *ngIf=\"RegistrationForm.controls.confirm_password.invalid && (RegistrationForm.controls.confirm_password.dirty || RegistrationForm.controls.confirm_password.touched)\" class=\"text-danger\">\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.confirm_password.errors.required\">Confirm Password is required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.confirm_password.errors.minlength\">Minimum 2 characters required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.confirm_password.errors.maxlength\">Maximum 10  characters required!</span>\n            <span class=\"error-msg\" *ngIf=\"RegistrationForm.controls.confirm_password.value !== RegistrationForm.controls.password.value\">Password and confirm password not maching!</span>\n        </div>\n        <div class=\"error-msg p-1\" *ngIf=\"RegistrationForm.controls.confirm_password.value !== RegistrationForm.controls.password.value\">Password and confirm password not maching!</div>\n        <div class=\"input-container\">\n            <button type=\"submit\">\n            Submit\n            </button>\n        </div>\n    </form>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "CommonService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "DashboardCardComponent"
                        },
                        {
                            "name": "DashboardComponent"
                        },
                        {
                            "name": "IndiviualProductCardComponent"
                        },
                        {
                            "name": "IndiviualProductComponent"
                        },
                        {
                            "name": "LayoutComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "!environment"
                        },
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "ProductModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CrudOprationsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ProductsCrudOprationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CrudOprationsRoutingModule"
                        },
                        {
                            "name": "LayoutModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CrudOprationsRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "LayoutModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddProductComponent"
                        },
                        {
                            "name": "ProductListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "LayoutModule"
                        },
                        {
                            "name": "ProductRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProductRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SetupModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "UserRegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SetupRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SetupRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "adapter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.reducer.ts",
                "type": "EntityAdapter<Product>",
                "defaultValue": "createEntityAdapter<Product>()"
            },
            {
                "name": "addProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Add component] Add Product',\n  props<{ product: Product }>()\n)"
            },
            {
                "name": "addProductFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Add Effect] Add Product Failuer',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "addProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Add Effect] Add Product Success',\n  props<{ product: Product }>()\n)"
            },
            {
                "name": "bookData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "[]",
                "defaultValue": "[\n    {\n      id: '1',\n      name: 'Wise and Otherwise: A salute to Life',\n      display_name: 'Wise and Otherwise',\n      author: 'Sudha Murty',\n      price: '250',\n      description: 'Understanding human and human nature is one of the toughest jobs .Many time what seems right and good or vice versa can be completely different if explored to proper depth. In many instance, we all come across people and forms an opinion about the people we meet without actually knowing anything about them. But hearing and learning about such instances helps us to redefine our thought process and become wiser. Sudha Murty’s book Wise and otherwise will take you to a journey across the length and breadth of India through narrations of 51 stories inspired by the extensive travels of the author herself.',\n      img_path: 'assets/img/sudhamurti1.jpeg'\n    },\n]"
            },
            {
                "name": "bookData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "object",
                "defaultValue": "{\n      id: '1',\n      name: 'Wise and Otherwise: A salute to Life',\n      display_name: 'Wise and Otherwise',\n      author: 'Sudha Murty',\n      price: '250',\n      description: 'Understanding human and human nature is one of the toughest jobs .Many time what seems right and good or vice versa can be completely different if explored to proper depth. In many instance, we all come across people and forms an opinion about the people we meet without actually knowing anything about them. But hearing and learning about such instances helps us to redefine our thought process and become wiser. Sudha Murty’s book Wise and otherwise will take you to a journey across the length and breadth of India through narrations of 51 stories inspired by the extensive travels of the author herself.',\n      img_path: 'assets/img/sudhamurti1.jpeg'\n    }"
            },
            {
                "name": "bookData2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 2,\n    name: 'The Gopi Diaries',\n    description: 'The Gopi Diaries is a series of three books for children about a dog called Gopi. Told in Gopi voice, the first book, Coming Home, begins with Gopi going to his new home, and tells the story of how he settles down with his loving, human family. How Gopi sees the world around him and what he thinks of the people in his life give the story a truly unique flavour. Written in Sudha Murty inimitable style, these are books children and adults will treasure as the simple stories talk of basic values even when told.',\n    price: '390',\n    quantity: '23',\n    img_path: 'assets/img/sudhamurti2.jpeg'\n  },\n]"
            },
            {
                "name": "bookData2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "object",
                "defaultValue": "{\n    id: 2,\n    name: 'The Gopi Diaries',\n    description: 'The Gopi Diaries is a series of three books for children about a dog called Gopi. Told in Gopi voice, the first book, Coming Home, begins with Gopi going to his new home, and tells the story of how he settles down with his loving, human family. How Gopi sees the world around him and what he thinks of the people in his life give the story a truly unique flavour. Written in Sudha Murty inimitable style, these are books children and adults will treasure as the simple stories talk of basic values even when told.',\n    price: '390',\n    quantity: '23',\n    img_path: 'assets/img/sudhamurti2.jpeg'\n  }"
            },
            {
                "name": "Button",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "card1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "card2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "darkTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
            },
            {
                "name": "Delete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "deleteProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product/API] Delete Product',\n  props<{ id: string }>()\n)"
            },
            {
                "name": "Edit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/button/button.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000/'\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.reducer.ts",
                "type": "",
                "defaultValue": "adapter.getSelectors()"
            },
            {
                "name": "HeaderContainer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/header/header.component.stories.ts",
                "type": "",
                "defaultValue": "() => ({\n  component: HeaderComponent,\n  template: `\n  <app-header></app-header>`,\n\n})"
            },
            {
                "name": "Indiviualcard1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Indiviualcard2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.reducer.ts",
                "type": "ProductState",
                "defaultValue": "adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n  selectedProduct: undefined\n})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "lightTheme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/theme.service.ts",
                "type": "object",
                "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#fff',\n  'text-color': '#2d2d2d'\n}"
            },
            {
                "name": "loadProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Components] Load Product',\n  props<{ id: string }>()\n)"
            },
            {
                "name": "loadProductFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Effect] Load Product Failure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "loadProducts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product List Components] Load Products',\n)"
            },
            {
                "name": "loadProductsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product List Effect] Load Products Failure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "loadProductsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product List Effect] Load Products Success',\n  props<{ products: Product[] }>()\n)"
            },
            {
                "name": "loadProductSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Effect] Load Product Success',\n  props<{ selectedProduct: Product }>()\n)"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "productReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.reducer.ts",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  // add product\n  on(ProductActions.addProductSuccess,\n    (state, action) =>\n      adapter.addOne(action.product, state)\n  ),\n  on(ProductActions.addProductFailure, (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }),\n// Load list of products\n  on(ProductActions.loadProductsSuccess,\n    (state, action) => adapter.setAll(action.products, state)\n  ),\n  on(ProductActions.loadProductsFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n// Load indiviual product\n  on(ProductActions.loadProductSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        selectedProduct: action.selectedProduct\n      };\n    }\n  ),\n  on(ProductActions.loadProductFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n// update product\n  on(ProductActions.updateProduct,\n    (state, action) => adapter.updateOne(action.product, state)\n  ),\n// delete product\n  on(ProductActions.deleteProduct,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n)"
            },
            {
                "name": "productsFeatureKey",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.reducer.ts",
                "type": "string",
                "defaultValue": "'products'"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectedProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.selecters.ts",
                "type": "",
                "defaultValue": "createSelector(selectProductState, (state: ProductState) => state.selectedProduct)"
            },
            {
                "name": "selectProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.selecters.ts",
                "type": "",
                "defaultValue": "createSelector(selectProductState, selectAll)"
            },
            {
                "name": "selectProductState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.selecters.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<ProductState> (\n    productsFeatureKey\n)"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "Story<DashboardCardComponent>",
                "defaultValue": "(args: DashboardCardComponent) => ({\n  component: DashboardCardComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/layout/button/button.component.stories.ts",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "Story<IndiviualProductCardComponent>",
                "defaultValue": "(args: IndiviualProductCardComponent) => ({\n  component: IndiviualProductCardComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "updateProduct",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/product/store/product.actions.ts",
                "type": "",
                "defaultValue": "createAction(\n  '[Product Edit Component] Update Product',\n  props<{ product: Update<Product> }>()\n)"
            }
        ],
        "functions": [
            {
                "name": "reducer",
                "file": "src/app/product/store/product.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "any",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/product/store/product.reducer.ts": [
                {
                    "name": "adapter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.reducer.ts",
                    "type": "EntityAdapter<Product>",
                    "defaultValue": "createEntityAdapter<Product>()"
                },
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.reducer.ts",
                    "type": "",
                    "defaultValue": "adapter.getSelectors()"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.reducer.ts",
                    "type": "ProductState",
                    "defaultValue": "adapter.getInitialState({\n  // additional entity state properties\n  error: undefined,\n  selectedProduct: undefined\n})"
                },
                {
                    "name": "productReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.reducer.ts",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  // add product\n  on(ProductActions.addProductSuccess,\n    (state, action) =>\n      adapter.addOne(action.product, state)\n  ),\n  on(ProductActions.addProductFailure, (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }),\n// Load list of products\n  on(ProductActions.loadProductsSuccess,\n    (state, action) => adapter.setAll(action.products, state)\n  ),\n  on(ProductActions.loadProductsFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n// Load indiviual product\n  on(ProductActions.loadProductSuccess,\n    (state, action) => {\n      return {\n        ...state,\n        selectedProduct: action.selectedProduct\n      };\n    }\n  ),\n  on(ProductActions.loadProductFailure,\n    (state, action) => {\n      return {\n        ...state,\n        error: action.error\n      };\n    }\n  ),\n// update product\n  on(ProductActions.updateProduct,\n    (state, action) => adapter.updateOne(action.product, state)\n  ),\n// delete product\n  on(ProductActions.deleteProduct,\n    (state, action) => adapter.removeOne(action.id, state)\n  ),\n)"
                },
                {
                    "name": "productsFeatureKey",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.reducer.ts",
                    "type": "string",
                    "defaultValue": "'products'"
                }
            ],
            "src/app/product/store/product.actions.ts": [
                {
                    "name": "addProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Add component] Add Product',\n  props<{ product: Product }>()\n)"
                },
                {
                    "name": "addProductFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Add Effect] Add Product Failuer',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "addProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Add Effect] Add Product Success',\n  props<{ product: Product }>()\n)"
                },
                {
                    "name": "deleteProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product/API] Delete Product',\n  props<{ id: string }>()\n)"
                },
                {
                    "name": "loadProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Components] Load Product',\n  props<{ id: string }>()\n)"
                },
                {
                    "name": "loadProductFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Effect] Load Product Failure',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "loadProducts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product List Components] Load Products',\n)"
                },
                {
                    "name": "loadProductsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product List Effect] Load Products Failure',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "loadProductsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product List Effect] Load Products Success',\n  props<{ products: Product[] }>()\n)"
                },
                {
                    "name": "loadProductSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Effect] Load Product Success',\n  props<{ selectedProduct: Product }>()\n)"
                },
                {
                    "name": "updateProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.actions.ts",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Product Edit Component] Update Product',\n  props<{ product: Update<Product> }>()\n)"
                }
            ],
            "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts": [
                {
                    "name": "bookData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n    {\n      id: '1',\n      name: 'Wise and Otherwise: A salute to Life',\n      display_name: 'Wise and Otherwise',\n      author: 'Sudha Murty',\n      price: '250',\n      description: 'Understanding human and human nature is one of the toughest jobs .Many time what seems right and good or vice versa can be completely different if explored to proper depth. In many instance, we all come across people and forms an opinion about the people we meet without actually knowing anything about them. But hearing and learning about such instances helps us to redefine our thought process and become wiser. Sudha Murty’s book Wise and otherwise will take you to a journey across the length and breadth of India through narrations of 51 stories inspired by the extensive travels of the author herself.',\n      img_path: 'assets/img/sudhamurti1.jpeg'\n    },\n]"
                },
                {
                    "name": "bookData2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 2,\n    name: 'The Gopi Diaries',\n    description: 'The Gopi Diaries is a series of three books for children about a dog called Gopi. Told in Gopi voice, the first book, Coming Home, begins with Gopi going to his new home, and tells the story of how he settles down with his loving, human family. How Gopi sees the world around him and what he thinks of the people in his life give the story a truly unique flavour. Written in Sudha Murty inimitable style, these are books children and adults will treasure as the simple stories talk of basic values even when told.',\n    price: '390',\n    quantity: '23',\n    img_path: 'assets/img/sudhamurti2.jpeg'\n  },\n]"
                },
                {
                    "name": "card1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "card2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                    "type": "Story<DashboardCardComponent>",
                    "defaultValue": "(args: DashboardCardComponent) => ({\n  component: DashboardCardComponent,\n  props: args,\n})"
                }
            ],
            "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts": [
                {
                    "name": "bookData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n      id: '1',\n      name: 'Wise and Otherwise: A salute to Life',\n      display_name: 'Wise and Otherwise',\n      author: 'Sudha Murty',\n      price: '250',\n      description: 'Understanding human and human nature is one of the toughest jobs .Many time what seems right and good or vice versa can be completely different if explored to proper depth. In many instance, we all come across people and forms an opinion about the people we meet without actually knowing anything about them. But hearing and learning about such instances helps us to redefine our thought process and become wiser. Sudha Murty’s book Wise and otherwise will take you to a journey across the length and breadth of India through narrations of 51 stories inspired by the extensive travels of the author herself.',\n      img_path: 'assets/img/sudhamurti1.jpeg'\n    }"
                },
                {
                    "name": "bookData2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                    "type": "object",
                    "defaultValue": "{\n    id: 2,\n    name: 'The Gopi Diaries',\n    description: 'The Gopi Diaries is a series of three books for children about a dog called Gopi. Told in Gopi voice, the first book, Coming Home, begins with Gopi going to his new home, and tells the story of how he settles down with his loving, human family. How Gopi sees the world around him and what he thinks of the people in his life give the story a truly unique flavour. Written in Sudha Murty inimitable style, these are books children and adults will treasure as the simple stories talk of basic values even when told.',\n    price: '390',\n    quantity: '23',\n    img_path: 'assets/img/sudhamurti2.jpeg'\n  }"
                },
                {
                    "name": "Indiviualcard1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Indiviualcard2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                    "type": "Story<IndiviualProductCardComponent>",
                    "defaultValue": "(args: IndiviualProductCardComponent) => ({\n  component: IndiviualProductCardComponent,\n  props: args,\n})"
                }
            ],
            "src/app/layout/button/button.component.stories.ts": [
                {
                    "name": "Button",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Delete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Edit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/button/button.component.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/button/button.component.stories.ts",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  component: ButtonComponent,\n  props: args,\n})"
                }
            ],
            "src/app/shared/services/theme.service.ts": [
                {
                    "name": "darkTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#455363',\n  'background-color': '#1f2935',\n  'text-color': '#fff'\n}"
                },
                {
                    "name": "lightTheme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/theme.service.ts",
                    "type": "object",
                    "defaultValue": "{\n  'primary-color': '#fff',\n  'background-color': '#fff',\n  'text-color': '#2d2d2d'\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  baseUrl: 'http://localhost:3000/'\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/app/layout/header/header.component.stories.ts": [
                {
                    "name": "HeaderContainer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/layout/header/header.component.stories.ts",
                    "type": "",
                    "defaultValue": "() => ({\n  component: HeaderComponent,\n  template: `\n  <app-header></app-header>`,\n\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/app/product/store/product.selecters.ts": [
                {
                    "name": "selectedProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.selecters.ts",
                    "type": "",
                    "defaultValue": "createSelector(selectProductState, (state: ProductState) => state.selectedProduct)"
                },
                {
                    "name": "selectProduct",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.selecters.ts",
                    "type": "",
                    "defaultValue": "createSelector(selectProductState, selectAll)"
                },
                {
                    "name": "selectProductState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/product/store/product.selecters.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProductState> (\n    productsFeatureKey\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/product/store/product.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/product/store/product.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "any",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    },
                    {
                        "path": "",
                        "component": "LayoutComponent",
                        "children": [
                            {
                                "path": "home",
                                "component": "DashboardComponent"
                            },
                            {
                                "path": "user",
                                "loadChildren": "./setup/setup.module#SetupModule",
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/setup/setup-routing.module.ts",
                                                "module": "SetupRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "login",
                                                        "component": "LoginComponent"
                                                    },
                                                    {
                                                        "path": "registration",
                                                        "component": "UserRegistrationComponent"
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "SetupModule"
                                    }
                                ]
                            },
                            {
                                "path": "crud-opration",
                                "loadChildren": "./crud-oprations/crud-oprations.module#CrudOprationsModule",
                                "canActivate": [
                                    "AuthGuard"
                                ],
                                "children": [
                                    {
                                        "kind": "module",
                                        "children": [
                                            {
                                                "name": "routes",
                                                "filename": "src/app/crud-oprations/crud-oprations-routing.module.ts",
                                                "module": "CrudOprationsRoutingModule",
                                                "children": [
                                                    {
                                                        "path": "product",
                                                        "component": "ProductsCrudOprationComponent",
                                                        "canActivate": [
                                                            "AuthGuard"
                                                        ]
                                                    }
                                                ],
                                                "kind": "module"
                                            }
                                        ],
                                        "module": "CrudOprationsModule"
                                    }
                                ]
                            },
                            {
                                "path": "ngrx-crud-opration",
                                "loadChildren": "./product/products.module#ProductModule",
                                "canActivate": [
                                    "AuthGuard"
                                ]
                            },
                            {
                                "path": "product/:id",
                                "component": "IndiviualProductComponent"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": "/home",
                        "pathMatch": "full"
                    }
                ],
                "kind": "module"
            },
            {
                "name": "routes",
                "filename": "src/app/product/product-routing.module.ts",
                "module": "ProductRoutingModule",
                "children": [
                    {
                        "path": "add-product",
                        "component": "AddProductComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "edit-product/:id",
                        "component": "AddProductComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "product-list",
                        "component": "ProductListComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/common.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CommonService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/crud-oprations/products-crud-opration/products-crud-opration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductsCrudOprationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookData2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "card1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "card2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-card/dashboard-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard-card/dashboard-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bookData2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Indiviualcard1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Indiviualcard2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product-card/indiviual-product-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IndiviualProductCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/dashboard/indiviual-product/indiviual-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IndiviualProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Button",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Edit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/button/button.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeaderContainer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/product/add-product/add-product.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddProductComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/product/product-list/product-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProductListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProducts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProductSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProductEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Product",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProductState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "adapter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "productsFeatureKey",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.selecters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectedProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.selecters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProduct",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/product/store/product.selecters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProductState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/setup/login-registration-setup.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginRegistrationSetupService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/setup/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/setup/model/user.model.ts",
                "type": "class",
                "linktype": "classe",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/setup/user-registration/user-registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserRegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth-guard.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthGuardService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/error-handling.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorHandlingService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "darkTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/theme.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "lightTheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderStoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}